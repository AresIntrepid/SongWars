{{#section 'head'}}
<style>
    /* Main container for the profile page */
    .profile-container {
        max-width: 1200px;
        margin: 40px auto;
        padding: 20px;Choose Profile Picture
    }

    /* Header section containing profile picture and user info */
    .profile-header {
        display: flex;
        align-items: center;
        gap: 30px;
        margin-bottom: 40px;
        background: #fff;
        padding: 30px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    /* Profile picture container with circular shape */
    .profile-picture {
        position: relative;
        width: 150px;
        height: 150px;
        margin: 0 auto;
        border-radius: 50%;
        overflow: hidden;
        background-color: #f0f0f0;
        display: flex;
        justify-content: center;
        align-items: center;
        font-size: 60px;
        color: #999;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    /* Container for profile picture content */
    .profile-picture-content {
        width: 100%;
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    /* Styling for the actual profile picture image */
    .profile-picture img {
        width: 100%;
        height: 100%;
        border-radius: 50%;
        object-fit: cover;
        border: 3px solid #fff;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    /* Default avatar emoji styling */
    .default-avatar {
        font-size: 60px;
        color: #999;
    }

    /* Overlay that appears on hover for changing profile picture */
    .profile-picture .upload-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.5);
        border-radius: 50%;
        display: flex;
        justify-content: center;
        align-items: center;
        opacity: 0;
        transition: opacity 0.2s;
        cursor: pointer;
        color: white;
        font-size: 16px;
    }

    /* Show overlay on hover */
    .profile-picture:hover .upload-overlay {
        opacity: 1;
    }

    /* Loading state for upload overlay */
    .profile-picture .upload-overlay.uploading {
        background: rgba(0,0,0,0.7);
        cursor: wait;
    }

    /* User information section */
    .profile-info {
        flex: 1;
    }

    /* Username styling */
    .profile-info h1 {
        margin: 0 0 10px 0;
        color: #333;
    }

    /* Stats grid layout */
    .profile-stats {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 20px;
        margin-top: 20px;
    }

    /* Individual stat box styling */
    .stat-box {
        background: #f8f9fa;
        padding: 15px;
        border-radius: 8px;
        text-align: center;
    }

    /* Stat label styling */
    .stat-box h3 {
        margin: 0;
        color: #666;
        font-size: 14px;
    }

    /* Stat value styling */
    .stat-box p {
        margin: 5px 0 0 0;
        font-size: 24px;
        font-weight: 600;
        color: #333;
    }

    /* Songs section container */
    .songs-section {
        background: #fff;
        padding: 30px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    /* Songs section header */
    .songs-header {
        margin-bottom: 20px;
    }

    /* Song upload form styling */
    .upload-song-form {
        margin-bottom: 20px;
        padding: 20px;
        background: #f8f9fa;
        border-radius: 8px;
    }

    /* Form group styling */
    .form-group {
        margin-bottom: 15px;
    }

    /* Form label styling */
    .form-group label {
        display: block;
        margin-bottom: 5px;
        font-weight: 600;
        color: #333;
    }

    /* Form input and select styling */
    .form-group input,
    .form-group select {
        width: 100%;
        padding: 8px;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-size: 16px;
    }

    /* Grid layout for songs */
    .songs-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        gap: 20px;
    }

    /* Individual song card styling */
    .song-card {
        background: #f8f9fa;
        padding: 15px;
        border-radius: 8px;
        position: relative;
    }

    /* Song title styling */
    .song-card h3 {
        margin: 0 0 10px 0;
        color: #333;
    }

    /* Song details styling */
    .song-card p {
        margin: 0;
        color: #666;
    }

    /* Delete button styling */
    .song-card .delete-btn {
        position: absolute;
        top: 10px;
        right: 10px;
        background: #dc3545;
        color: white;
        border: none;
        border-radius: 4px;
        padding: 5px 10px;
        cursor: pointer;
        opacity: 0;
        transition: opacity 0.2s;
    }

    /* Show delete button on hover */
    .song-card:hover .delete-btn {
        opacity: 1;
    }

    /* Base button styling */
    .btn {
        padding: 10px 20px;
        border: none;
        border-radius: 4px;
        font-size: 16px;
        font-weight: 600;
        cursor: pointer;
        transition: background-color 0.2s;
    }

    /* Primary button styling */
    .btn-primary {
        background: #007bff;
        color: white;
    }

    /* Primary button hover state */
    .btn-primary:hover {
        background: #0056b3;
    }

    /* Success button styling */
    .btn-success {
        background: #28a745;
        color: white;
    }

    /* Success button hover state */
    .btn-success:hover {
        background: #218838;
    }

    /* Error message styling */
    .error-message {
        color: #dc3545;
        background: #f8d7da;
        padding: 10px;
        border-radius: 4px;
        margin-bottom: 20px;
    }

    /* Action buttons container */
    .action-buttons {
        margin: 20px 0;
        display: flex;
        gap: 10px;
    }

    /* Danger button styling */
    .btn-danger {
        background: #dc3545;
        color: white;
        text-decoration: none;
        display: inline-block;
    }

    .btn-danger:hover {
        background: #c82333;
    }

    /* Navigation bar at the top */
    .nav-bar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem 2rem;
        background: #fff;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        margin-bottom: 2rem;
    }

    /* Navigation buttons container */
    .nav-buttons {
        display: flex;
        gap: 1rem;
    }

    /* Home button styling */
    .btn-home {
        background: #007bff;
        color: white;
        text-decoration: none;
        display: inline-block;
    }

    .btn-home:hover {
        background: #0056b3;
    }

    /* Profile picture upload form */
    .profile-picture-form {
        margin-top: 1rem;
        text-align: center;
    }

    /* File input styling */
    .file-input-wrapper {
        position: relative;
        display: inline-block;
    }

    .file-input-wrapper input[type="file"] {
        display: none;
    }

    .file-input-label {
        display: inline-block;
        padding: 8px 16px;
        background: #007bff;
        color: white;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.2s;
    }

    .file-input-label:hover {
        background: #0056b3;
    }
</style>
{{/section}}

<!-- Navigation bar -->
<div class="nav-bar">
    <div class="nav-buttons">
        <a href="/" class="btn btn-home">Home</a>
        <a href="/auth/logout" class="btn btn-danger">Logout</a>
    </div>
</div>

<!-- Main profile container -->
<div class="profile-container">
    <!-- Profile header section -->
    <div class="profile-header">
        <!-- Profile picture section -->
        <div class="profile-picture">
            <!-- Profile picture content container -->
            <div class="profile-picture-content">
                {{#if user.profilePicture}}
                    <!-- Display user's profile picture if available -->
                    <img src="{{user.profilePicture}}" alt="Profile Picture" id="profile-picture">
                {{else}}
                    <!-- Display default avatar if no profile picture -->
                    <span class="default-avatar">ðŸ‘¤</span>
                {{/if}}
            </div>
        </div>

        <!-- Profile picture upload form -->
        <div class="profile-picture-form">
            <div class="file-input-wrapper">
                <label for="profile-picture-input" class="file-input-label"></label>
                <input type="file" id="profile-picture-input" accept="image/*">
            </div>
        </div>

        <!-- User information section -->
        <div class="profile-info">
            <!-- Username -->
            <h1>{{user.username}}</h1>
            <p>Rank: {{getRank user.elo}}</p>
            <p>ELO: {{user.elo}}</p>

            {{!-- Stats grid --}}
            <div class="profile-stats">
                <div class="stat-box">
                    <h3>Wins</h3>
                    <p>{{user.wins}}</p>
                </div>
                <div class="stat-box">
                    <h3>Losses</h3>
                    <p>{{user.losses}}</p>
                </div>
                <div class="stat-box">
                    <h3>Total Matches</h3>
                    <p>{{add user.wins user.losses}}</p>
                </div>
                <div class="stat-box">
                    <h3>Win Rate</h3>
                    <p>{{#if (add user.wins user.losses)}}{{multiply (divide user.wins (add user.wins user.losses)) 100}}%{{else}}0%{{/if}}</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Songs section -->
    <div class="songs-section">
        <!-- Songs section header -->
        <div class="songs-header">
            <h2>My Songs</h2>
        </div>

        <!-- Song upload form -->
        <form class="upload-song-form" id="upload-song-form">
            <!-- Song title input -->
            <div class="form-group">
                <label for="song-title">Song Title</label>
                <input type="text" id="song-title" name="title" required>
            </div>
            <!-- Genre selection -->
            <div class="form-group">
                <label for="song-genre">Genre</label>
                <select id="song-genre" name="genre" required>
                    {{#each genres}}
                    <option value="{{this}}">{{this}}</option>
                    {{/each}}
                </select>
            </div>
            <!-- Song file upload -->
            <div class="form-group">
                <label for="song-file">Song File (MP4)</label>
                <input type="file" id="song-file" name="song" accept="video/mp4" required>
            </div>
            <!-- Upload button -->
            <button type="submit" class="btn btn-success">Upload Song</button>
        </form>

        <!-- Songs grid -->
        <div class="songs-grid">
            {{#each user.songs}}
            <!-- Individual song card -->
            <div class="song-card">
                <h3>{{title}}</h3>
                <p>Genre: {{genre}}</p>
                <p>Uploaded: {{formatDate uploadDate}}</p>
                <!-- Delete button -->
                <button class="delete-btn" data-song-id="{{_id}}">Delete</button>
            </div>
            {{/each}}
        </div>
    </div>
</div>

{{#section 'scripts'}}
<script>
    // Get DOM elements for profile picture functionality
    const profilePictureInput = document.getElementById('profile-picture-input');
    const profilePicture = document.getElementById('profile-picture');
    const fileInputLabel = document.querySelector('.file-input-label');

    // Handle profile picture file selection
    profilePictureInput.addEventListener('change', async (e) => {
        const file = e.target.files[0];
        if (!file) return;

        // Validate file type
        const allowedTypes = ['image/jpeg', 'image/png', 'image/gif'];
        if (!allowedTypes.includes(file.type)) {
            alert('Please upload a valid image file (JPEG, PNG, or GIF)');
            return;
        }

        // Validate file size (5MB limit)
        if (file.size > 5 * 1024 * 1024) {
            alert('File size must be less than 5MB');
            return;
        }

        // Create form data for upload
        const formData = new FormData();
        formData.append('profilePicture', file);

        try {
            // Show loading state
            fileInputLabel.textContent = 'Uploading...';
            fileInputLabel.style.background = '#6c757d';
            fileInputLabel.style.cursor = 'wait';

            // Send profile picture to server
            const response = await fetch('/profile/update-picture', {
                method: 'POST',
                body: formData
            });

            if (response.ok) {
                // Update profile picture display
                const data = await response.json();
                profilePicture.src = data.profilePicture + '?t=' + new Date().getTime();
                fileInputLabel.textContent = 'Choose Profile Picture';
                fileInputLabel.style.background = '#007bff';
                fileInputLabel.style.cursor = 'pointer';
            } else {
                throw new Error('Failed to update profile picture');
            }
        } catch (error) {
            console.error('Error uploading profile picture:', error);
            alert('Failed to update profile picture. Please try again.');
            fileInputLabel.textContent = 'Choose Profile Picture';
            fileInputLabel.style.background = '#007bff';
            fileInputLabel.style.cursor = 'pointer';
        }
    });

    // Get song upload form element
    const uploadSongForm = document.getElementById('upload-song-form');

    // Handle song upload form submission
    uploadSongForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        const formData = new FormData(uploadSongForm);

        try {
            // Send song to server
            const response = await fetch('/profile/upload-song', {
                method: 'POST',
                body: formData
            });

            if (response.ok) {
                // Reload page to show new song
                window.location.reload();
            } else {
                alert('Failed to upload song');
            }
        } catch (error) {
            console.error('Error uploading song:', error);
            alert('Failed to upload song');
        }
    });

    // Handle song deletion
    document.querySelectorAll('.delete-btn').forEach(btn => {
        btn.addEventListener('click', async () => {
            if (!confirm('Are you sure you want to delete this song?')) return;

            const songId = btn.dataset.songId;
            try {
                // Send delete request to server
                const response = await fetch(`/profile/delete-song/${songId}`, {
                    method: 'DELETE'
                });

                if (response.ok) {
                    // Reload page to update song list
                    window.location.reload();
                } else {
                    alert('Failed to delete song');
                }
            } catch (error) {
                console.error('Error deleting song:', error);
                alert('Failed to delete song');
            }
        });
    });
</script>
{{/section}} 